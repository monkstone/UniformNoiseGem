package micycle.uniformnoise;

/**
 * Extracted from https://github.com/Auburn/FastNoise
 */
class PerlinNoiseLite {

	// Hashing
	private static final int PRIME_X = 501125321;
	private static final int PRIME_Y = 1136930381;
	private static final int PRIME_Z = 1720413743;

	static double singlePerlin(int seed, double x, double y) {
		int x0 = fastFloor(x);
		int y0 = fastFloor(y);

		double xd0 = (x - x0);
		double yd0 = (y - y0);
		double xd1 = xd0 - 1;
		double yd1 = yd0 - 1;

		double xs = interpQuintic(xd0);
		double ys = interpQuintic(yd0);

		x0 *= PRIME_X;
		y0 *= PRIME_Y;
		int x1 = x0 + PRIME_X;
		int y1 = y0 + PRIME_Y;

		double xf0 = lerp(gradCoord(seed, x0, y0, xd0, yd0), gradCoord(seed, x1, y0, xd1, yd0), xs);
		double xf1 = lerp(gradCoord(seed, x0, y1, xd0, yd1), gradCoord(seed, x1, y1, xd1, yd1), xs);

		return lerp(xf0, xf1, ys) * 1.4247691104677813f;
	}

	static double singlePerlin(int seed, double x, double y, double z) {
		int x0 = fastFloor(x);
		int y0 = fastFloor(y);
		int z0 = fastFloor(z);

		double xd0 = (x - x0);
		double yd0 = (y - y0);
		double zd0 = (z - z0);
		double xd1 = xd0 - 1;
		double yd1 = yd0 - 1;
		double zd1 = zd0 - 1;

		double xs = interpQuintic(xd0);
		double ys = interpQuintic(yd0);
		double zs = interpQuintic(zd0);

		x0 *= PRIME_X;
		y0 *= PRIME_Y;
		z0 *= PRIME_Z;
		int x1 = x0 + PRIME_X;
		int y1 = y0 + PRIME_Y;
		int z1 = z0 + PRIME_Z;

		double xf00 = lerp(gradCoord(seed, x0, y0, z0, xd0, yd0, zd0), gradCoord(seed, x1, y0, z0, xd1, yd0, zd0), xs);
		double xf10 = lerp(gradCoord(seed, x0, y1, z0, xd0, yd1, zd0), gradCoord(seed, x1, y1, z0, xd1, yd1, zd0), xs);
		double xf01 = lerp(gradCoord(seed, x0, y0, z1, xd0, yd0, zd1), gradCoord(seed, x1, y0, z1, xd1, yd0, zd1), xs);
		double xf11 = lerp(gradCoord(seed, x0, y1, z1, xd0, yd1, zd1), gradCoord(seed, x1, y1, z1, xd1, yd1, zd1), xs);

		double yf0 = lerp(xf00, xf10, ys);
		double yf1 = lerp(xf01, xf11, ys);

		return lerp(yf0, yf1, zs) * 0.964921414852142333984375f;
	}

	private static double gradCoord(int seed, int xPrimed, int yPrimed, double xd, double yd) {
		int hash = hashValue(seed, xPrimed, yPrimed);
		hash ^= hash >> 15;
		hash &= 127 << 1;

		double xg = gradients2D[hash];
		double yg = gradients2D[hash | 1];

		return xd * xg + yd * yg;
	}

	private static double gradCoord(int seed, int xPrimed, int yPrimed, int zPrimed, double xd, double yd, double zd) {
		int hash = hashValue(seed, xPrimed, yPrimed, zPrimed);
		hash ^= hash >> 15;
		hash &= 63 << 2;

		double xg = gradients3D[hash];
		double yg = gradients3D[hash | 1];
		double zg = gradients3D[hash | 2];

		return xd * xg + yd * yg + zd * zg;
	}

	private static int hashValue(int seed, int xPrimed, int yPrimed) {
		int hash = seed ^ xPrimed ^ yPrimed;
		hash *= 0x27d4eb2d;
		return hash;
	}

	private static int hashValue(int seed, int xPrimed, int yPrimed, int zPrimed) {
		int hash = seed ^ xPrimed ^ yPrimed ^ zPrimed;
		hash *= 0x27d4eb2d;
		return hash;
	}

	private static double interpQuintic(double t) {
		return t * t * t * (t * (t * 6 - 15) + 10);
	}
        
        private static int fastFloor(double x) {
		int xi = (int)x;
		return x < xi ? xi - 1 : xi;
	}


	private static double lerp(double a, double b, double t) {
		return a + t * (b - a);
	}

	private static final double[] gradients2D = { 0.130526192220052, 0.99144486137381, 0.38268343236509,
			0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721,
			0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381,
			-0.130526192220051, 0.923879532511287, -0.38268343236509, 0.793353340291235, -0.60876142900872,
			0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052,
			-0.99144486137381, -0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287,
			-0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721, -0.923879532511287,
			-0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051,
			-0.923879532511287, 0.38268343236509, -0.793353340291235, 0.608761429008721, -0.608761429008721,
			0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381,
			0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721,
			0.793353340291235, 0.793353340291235, 0.608761429008721, 0.923879532511287, 0.38268343236509,
			0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287,
			-0.38268343236509, 0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235,
			0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381, -0.130526192220052,
			-0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235,
			-0.793353340291235, -0.608761429008721, -0.923879532511287, -0.38268343236509, -0.99144486137381,
			-0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509,
			-0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509,
			0.923879532511287, -0.130526192220052, 0.99144486137381, 0.130526192220052, 0.99144486137381,
			0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235, 0.793353340291235,
			0.608761429008721, 0.923879532511287, 0.38268343236509, 0.99144486137381, 0.130526192220051,
			0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509, 0.793353340291235,
			-0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509, -0.923879532511287,
			0.130526192220052, -0.99144486137381, -0.130526192220052, -0.99144486137381, -0.38268343236509,
			-0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235, -0.608761429008721,
			-0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052, -0.99144486137381,
			0.130526192220051, -0.923879532511287, 0.38268343236509, -0.793353340291235, 0.608761429008721,
			-0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287, -0.130526192220052,
			0.99144486137381, 0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287,
			0.608761429008721, 0.793353340291235, 0.793353340291235, 0.608761429008721, 0.923879532511287,
			0.38268343236509, 0.99144486137381, 0.130526192220051, 0.99144486137381, -0.130526192220051,
			0.923879532511287, -0.38268343236509, 0.793353340291235, -0.60876142900872, 0.608761429008721,
			-0.793353340291235, 0.38268343236509, -0.923879532511287, 0.130526192220052, -0.99144486137381,
			-0.130526192220052, -0.99144486137381, -0.38268343236509, -0.923879532511287, -0.608761429008721,
			-0.793353340291235, -0.793353340291235, -0.608761429008721, -0.923879532511287, -0.38268343236509,
			-0.99144486137381, -0.130526192220052, -0.99144486137381, 0.130526192220051, -0.923879532511287,
			0.38268343236509, -0.793353340291235, 0.608761429008721, -0.608761429008721, 0.793353340291235,
			-0.38268343236509, 0.923879532511287, -0.130526192220052, 0.99144486137381, 0.130526192220052,
			0.99144486137381, 0.38268343236509, 0.923879532511287, 0.608761429008721, 0.793353340291235,
			0.793353340291235, 0.608761429008721, 0.923879532511287, 0.38268343236509, 0.99144486137381,
			0.130526192220051, 0.99144486137381, -0.130526192220051, 0.923879532511287, -0.38268343236509,
			0.793353340291235, -0.60876142900872, 0.608761429008721, -0.793353340291235, 0.38268343236509,
			-0.923879532511287, 0.130526192220052, -0.99144486137381, -0.130526192220052, -0.99144486137381,
			-0.38268343236509, -0.923879532511287, -0.608761429008721, -0.793353340291235, -0.793353340291235,
			-0.608761429008721, -0.923879532511287, -0.38268343236509, -0.99144486137381, -0.130526192220052,
			-0.99144486137381, 0.130526192220051, -0.923879532511287, 0.38268343236509, -0.793353340291235,
			0.608761429008721, -0.608761429008721, 0.793353340291235, -0.38268343236509, 0.923879532511287,
			-0.130526192220052, 0.99144486137381, 0.38268343236509, 0.923879532511287, 0.923879532511287,
			0.38268343236509, 0.923879532511287, -0.38268343236509, 0.38268343236509, -0.923879532511287,
			-0.38268343236509, -0.923879532511287, -0.923879532511287, -0.38268343236509, -0.923879532511287,
			0.38268343236509, -0.38268343236509, 0.923879532511287, };

	private static final double[] gradients3D = { 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 1, 0, 1, 0, -1, 0,
			1, 0, 1, 0, -1, 0, -1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 1,
			0, 0, 1, -1, 0, 0, -1, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 0, 0,
			1, -1, 0, 0, -1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, 1,
			0, -1, 0, -1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1,
			-1, 0, 0, -1, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0, -1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0,
			0, -1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, 1, 0, -1, 0,
			-1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0, 1, 1, 0, 0, 0, -1, 1, 0, -1, 1, 0, 0, 0,
			-1, -1, 0 };

}
